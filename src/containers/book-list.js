import React, {Component} from "react";
import {connect} from "react-redux";
import {selectBook} from "../actions/index";
import {bindActionCreators} from "redux"; // A function used to make action flows through all diferent reducers in the applications
// Container is the bridge between React and Redux
// ReactRedux is a third library that bring the two together
// Container is a react component that has a direct access to the state produced by redux

class BookList extends Component {
  renderList() {
    return this.props.books.map(book => {
      return (
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item"
        >
          {book.title}
        </li>
      );
    });
  }

  render() {
    return <ul className="list-group col-sm-4">{this.renderList()}</ul>;
  }
}

function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of BookList
  return {
    books: state.books // value returned by BooksReducer
  };
}

// Anything returned from this function will end up as mapStateToProps
// on the BookList container
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed
  // to all of our reducers
  return bindActionCreators({selectBook: selectBook}, dispatch);
}

// Promote BookList from a component to a container -  it needs to know
// about this new dispatch method, selectBook. Make it available
// as props
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(BookList);
// Redux serves to construct the Application State
// React is the View
// Application State is generated by reducer functions
